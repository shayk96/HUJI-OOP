shayk96
207902602

for each pixel the program goes through the chars and finds the char with the closest brightness and replaces the pixel
with the matching char. the same goes for a sub image.
for each pixel the program transforms it from colored to grey by using the formula given to us by the course staff.
than calculating the the brightness of an image the programs sums up all the pixels gery scale and divides it by the
number of pixels.


####################
PART 2 README:
####################

In this part of the exercise i used a hashmap from the Collections Package in order to reduce run time by saving the
brightens level of each sub image of the image to render. On the first time that the user chose to render an image the
program calculated the brightness level of the image and saved it to a hashmap. The Next time that the user chose to
render the img the program already had the img brightness level calculated and didnt calculated it again. If the user
changed the resolution between renders the program calculated the brightness again and saved it again.

I wanted to change the Char arrays in the first part of the exercise to hashmaps but i sow in the forum that we cant
change the functions calls. The solution was to receive the chars as a simple array and change it in the function but i
decided that in this solution the run time stays the same because of the transfer from an array to hashmap.

Algorithms run time:
1.  The function declares 2 primitive variables so the space complexity is O(2) == O(1). In addition, the function
    iterates through the array twice: The first time it searches to find the location of the duplicate number and the
    second time it searches for the duplicate number "name".
    In both iterations in the worst case the function iterates through all the array elements and so the time complexity
    is O(2n) == O(n)

2.  The function takes each word in the input array and constructs it in morse code. Than it adds it to a hashset in
    morse representation. In the end the function returns the size of the set. The function uses a hashset, a data base
    that doesnt allow duplicates, so the number of elements in the set is the number of unique morse codes.
    The function iterates over the words and for each word it iterates through the letters, translates them into a morse
    code and constructs the word in morse and than adds it to the hashset. The run time for each word is the length of
    the word and the function translates each word so the run time is the length of the words combines as required.

I added the picture as a TXT file.